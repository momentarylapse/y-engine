use os
use gfx.*
use image.Image

class EngineData
	var context: void&
	var debug: bool
	var show_timings: bool
	var console_enabled: bool
	#bool wire_mode
	var resetting_game, game_running, first_frame: bool
	var physical_aspect_ratio: f32
	
	var physics_enabled, collisions_enabled: bool
	var detail_level: f32
	
	var elapsed: f32
	var elapsed_rt: f32
	var time_scale: f32
	
	var fps_min, fps_max: f32
	var resolution_scale: vec2
	
	var initial_world_file, second_world_file: os.Path
	#Font* default_font
	var renderer: Renderer&
	var region_renderer: RegionRenderer&
	var render_path: RenderPath&
	var hdr_renderer: HDRRenderer*
	var post_processor: PostProcessor*
	
	func extern add_render_task(task: xfer[RenderTask], priority: i32)

	func extern exit()

struct RenderParams

class Renderer
	func virtual prepare(params: RenderParams)
	func virtual draw(params: RenderParams)

class RenderTask extends Renderer
	var active: bool
	func virtual render(params: RenderParams)

class ComputeTask extends RenderTask
	func extern __init__(name: string, shader: shared![Shader], nx: i32, ny: i32, nz: i32)
	func override extern render(params: RenderParams)
	func extern bind_texture(index: i32, tex: Texture&)
	func extern bind_image(index: i32, tex: Texture&)
	func extern bind_uniform_buffer(index: i32, buf: UniformBuffer&)
	func extern bind_storage_buffer(index: i32, buf: ShaderStorageBuffer&)

class RegionRenderer
	struct Region
		var dest: rect
		var z: int
		var renderer: Renderer&
	var regions: Region[]
	func extern add_region(r: Renderer&, dest: rect, z: int)


class RenderPath
	enum Type
		NONE
		FORWARD
		DEFERRED
	var type: Type
	var wireframe: bool
	
	# debugging
	func extern get_gbuffer() -> FrameBuffer*
	func extern get_shadow_map() -> shared![DepthBuffer][]
	func extern get_cubemap() -> CubeMap*

	#func extern virtual render_into_texture(fb: FrameBuffer, cam: Camera)
	#func extern render_into_cubemap(db: DepthBuffer, cube: CubeMap, pos: vector)


class LightMeter
	var histogram: i32[]
	var brightness: f32


class HDRRenderer
	var texture: shared![Texture]
	var depth_buffer: shared![DepthBuffer]
	#func extern tex_bloom() -> Texture&[]
	func extern tex_bloom() -> shared![Texture][]
	
	var light_meter: LightMeter&


class PostProcessor
	var fb1, fb2: FrameBuffer&
	func extern next_fb(cur: FrameBuffer) -> FrameBuffer&
	func extern process(source: Texture*[], target: FrameBuffer, shader: Shader)
	func extern mut add_stage(on_prepare: void->void, on_draw: void->void)


class PerformanceMonitor
	struct Channel
		var name: string
		var parent: i32
		var average: f32
	struct TimingData
		var channel: i32
		var offset: f32
	struct FrameTimingData
		var cpu0: TimingData[]
		var gpu: TimingData[]
		var total_time: f32
	func extern static get_name(channel: i32)
	var extern static channels: Channel[]
	var extern static previous_frame_timing: FrameTimingData
	var extern static avg_frame_time: f32
	var extern static frames: i32
	#class Average
	#	var frame_time: float
	#	var location: float[16]
	#var frames: int
	#var avg: Average
#var extern perf_mon: PerformanceMonitor*

var extern engine: EngineData

func extern screenshot(out im: Image)
