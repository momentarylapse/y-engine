use os
use gfx.*
use image.Image

class EngineData
	var context: void&
	var debug: bool
	var show_timings: bool
	var console_enabled: bool
	#bool wire_mode
	var resetting_game, game_running, first_frame: bool
	var physical_aspect_ratio: float
	
	var physics_enabled, collisions_enabled: bool
	var detail_level: float
	
	var elapsed: float
	var elapsed_rt: float
	var time_scale: float
	
	var fps_min, fps_max: float
	var resolution_scale: vec2
	
	var initial_world_file, second_world_file: os.Path
	#Font* default_font
	var renderer: Renderer&
	var region_renderer: RegionRenderer&
	var render_path: RenderPath&
	var hdr_renderer: HDRRenderer*
	var post_processor: PostProcessor*

	func extern exit()

class Renderer

class RegionRenderer
	struct Region
		var dest: rect
		var z: int
		var renderer: Renderer&
	var regions: Region[]
	func extern add_region(r: Renderer&, dest: rect, z: int)

class RenderPath
	enum Type
		NONE
		FORWARD
		DEFERRED
	var type: Type
	var shader_fx: Shader*
	var wireframe: bool
	
	# debugging
	func extern get_gbuffer() -> FrameBuffer*
	func extern get_fb_shadow() -> FrameBuffer&[]
	func extern get_cubemap() -> CubeMap*

	#func extern virtual render_into_texture(fb: FrameBuffer, cam: Camera)
	#func extern render_into_cubemap(db: DepthBuffer, cube: CubeMap, pos: vector)

class HDRRenderer
	var fb_main: FrameBuffer&
	func extern fb_bloom() -> FrameBuffer&[]

class PostProcessor
	var fb1, fb2: FrameBuffer&
	func extern next_fb(cur: FrameBuffer) -> FrameBuffer&
	func extern process(source: Texture*[], target: FrameBuffer, shader: Shader)
	func extern mut add_stage(on_prepare: void->void, on_draw: void->void)

class Scheduler
	func static extern mut subscribe(dt: float, f: void->void)


class PerformanceMonitor
	struct Channel
		var name: string
		var parent: int
		var average: float
	struct TimingData
		var channel: int
		var offset: float
	struct FrameTimingData
		var cpu0: TimingData[]
		var gpu: TimingData[]
		var total_time: float
	func extern static get_name(channel: int)
	var extern static channels: Channel[]
	var extern static previous_frame_timing: FrameTimingData
	var extern static avg_frame_time: float
	var extern static frames: int
	#class Average
	#	var frame_time: float
	#	var location: float[16]
	#var frames: int
	#var avg: Average
#var extern perf_mon: PerformanceMonitor*

var extern engine: EngineData

func extern screenshot(out im: Image)
