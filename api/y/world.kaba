use os
use kaba
use gfx.*
use fx.*
use ecs.*
use model.*
use audio.*


class SolidBody extends Component
	let PARAMETERS = "mass,theta,physics_active,physics_passive,g_factor"
	var vel: vec3 # world frame
	var rot: vec3 # world frame
	var mass: f32
	var theta: mat3 # local frame
	var physics_active: bool
	var physics_passive: bool
	var g_factor: f32
	
	# all parameters in world frame!
	func extern mut add_force(f: vec3, rho: vec3 = vec3.0)
	func extern mut add_impulse(p: vec3, rho: vec3 = vec3.0)
	func extern mut add_torque(t: vec3)
	func extern mut add_torque_impulse(l: vec3)
	
	func extern mut update_mass()
	func extern mut update_motion(mask: i32)


class Collider extends Component
class MeshCollider extends Collider
class BoxCollider extends Collider
class SphereCollider extends Collider
class TerrainCollider extends Collider


class EgoMarker extends Component


class MultiInstance extends Component
	var model: Model*
	var matrices: mat4[]


class Terrain extends Component
	var pattern: vec3
	var num_x, num_z: i32
	var height: f32[]
	var vertex_shader_module: string
	var material: owned![Material]
	var texture_scale: vec3[8]
	func extern get_height(p: vec3) -> f32
	func extern mut update(x1: i32, x2: i32, y1: i32, y2: i32, mask: i32)
	# ...


class Light extends Component
	let PARAMETERS = "type,color,power,theta,harshness,enabled,allow_shadow"
	var type: i32#LightType
	var color: Color
	var power: f32
	var theta: f32
	var harshness: f32
	var enabled: bool
	var allow_shadow: bool
	var user_shadow_control: bool
	var user_shadow_theta: f32
	var shadow_dist_min: f32
	var shadow_dist_max: f32
	func extern mut set_direction(dir: vec3)

#	class Spherical extends Light
#		func extern __init__(pos: vec3, c: color, radius: float)
#
#	class Parallel extends Light
#		func extern __init__(ang: quaternion, c: color)
#
#	class Cone extends Light
#		func extern __init__(pos: vec3, ang: quaternion, c: color, radius: float, theta: float)


func extern ref attach_light_parallel(e: Entity, c: Color) -> Light&
func extern ref attach_light_point(e: Entity, c: Color, radius: f32) -> Light&
func extern ref attach_light_cone(e: Entity, c: Color, radius: f32, theta: f32) -> Light&


class Camera extends Component
	let PARAMETERS = "min_depth,max_depth,exposure,fov"
	var exposure: f32
	var bloom_radius: f32
	var bloom_factor: f32
	
	var auto_exposure: bool
	var auto_exposure_min: f32
	var auto_exposure_max: f32
	var auto_exposure_speed: f32 # ignored
	
	var focus_enabled: bool
	var focal_length: f32
	var focal_blur: f32
	
	var fov: f32
	var min_depth, max_depth: f32
	
	var show, enabled: bool

	func extern project(p: vec3) -> vec3
	func extern unproject(p: vec3) -> vec3
	func extern mut update_matrix_cache(aspect_ratio: f32)


class CubeMapSource extends Component
	var min_depth, max_depth: f32
	var cube_map: shared[CubeMap]
	var resolution: i32
	var update_rate: i32


class NameTag extends Component
	var name: string


class ModelRef extends Component
	let PARAMETERS = "filename"
	var model: Model*
	var filename: os.Path


class TerrainRef extends Component
	let PARAMETERS = "filename"
	var terrain: Terrain*
	var filename: os.Path


class Fog
	var color: Color
	var distance: f32
	var enabled: bool


class Link extends BaseClass
	var a, b: Model*
	func extern mut set_motor(v: f32, max: f32)
#	extern void mut set_axis(vector v)
	func extern mut set_frame(n: i32, q: Quaternion)

#	class Socket extends Link
#		extern void __init__(Model* a, Model* b, vector pos)
#	...



class Physics extends Controller
	enum Mode
		NONE
		SIMPLE
		FULL_INTERNAL
		FULL_EXTERNAL
	var mode: Mode
	var gravity: vec3
	var links: Link&[]
	var enabled: bool
	var collisions_enabled: bool
	func extern get_g(pos: vec3) -> vec3
	func extern delete_link(e: Link*)
	func extern mut set_active_physics(o: Model, active: bool)


enum TraceMode
	PHYSICAL = 1
	VISIBLE = 2
	SIMPLE = 4


class World
	func extern selfref ego() -> Entity*
	
	var background: Color
	var skyboxes: Model&[]
	
	var fog: Fog
	
	func extern mut load_soon(filename: os.Path)
	
	func extern mut selfref create_light_parallel(ang: Quaternion, c: Color) -> Light&
	func extern mut selfref create_light_point(pos: vec3, c: Color, radius: f32) -> Light&
	func extern mut selfref create_light_cone(pos: vec3, ang: Quaternion, c: Color, radius: f32, theta: f32) -> Light&

	#func extern mut selfref add_particle(p: xfer[LegacyParticle]) -> LegacyParticle&
	func extern mut selfref _add_particle(type: kaba.Class*, pos: vec3, radius: f32, c: Color, tex: shared![Texture], ttl: f32 = -1.0) -> LegacyParticle&
	func mut selfref create_particle[T](pos: vec3, radius: f32, c: Color = Color.WHITE, tex: shared![Texture] = tex_white, ttl: f32 = -1.0) -> T&
		return _add_particle(T, pos, radius, c, tex, ttl) as T&
		
	func extern mut selfref load_template(filename: os.Path, pos: vec3, ang: Quaternion = Quaternion.ID) -> Entity&
	func extern mut selfref create_object(filename: os.Path, pos: vec3, ang: Quaternion) -> Model&
	func extern mut selfref create_object_multi(filename: os.Path, pos: vec3[], ang: Quaternion[]) -> MultiInstance&
	func extern mut selfref create_terrain(filename: os.Path, pos: vec3) -> Terrain&
	func extern mut selfref create_camera(pos: vec3, ang: Quaternion) -> Camera&
	func extern mut selfref create_entity(pos: vec3, ang: Quaternion = Quaternion.ID) -> Entity&
	func extern mut selfref attach_model(e: Entity&, filename: os.Path) -> Model&
	func extern mut selfref unattach_model(m: Model&)
	func extern mut shift_all(dpos: vec3)
	func extern trace(p1: vec3, p2: vec3, mode: TraceMode = TraceMode.PHYSICAL, ignore: Entity* = (nil as Entity*)) -> CollisionData?
	
	func selfref objects() -> Model&[]&
		return get_component_family_list[Model]()
	func selfref terrains() -> Terrain&[]&
		return get_component_family_list[Terrain]()
	func selfref lights() -> Light&[]&
		return get_component_family_list[Light]()

#	func extern delete(o: void*)
	func extern delete_entity(e: Entity*)
	
	class MessageData
		var e: Entity*
		var v: vec3
	var msg_data: MessageData
	
	func extern mut subscribe(msg: string, f: void->void)


#func model(e: Entity) -> Model*
#	var m: Model* = e.get_component[Model]()
#	return m
#func body(e: Entity) -> SolidBody*
#	var b: SolidBody* = e.get_component(SolidBody)
#	return b

var extern world: World
