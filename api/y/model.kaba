use os
use gfx.*
use ecs.*

class Material
	var albedo: Color
	var roughness: f32
	var metal: f32
	var emission: Color
	var textures: shared![Texture][]
#	var shader: shared![Shader][6]
	var cast_shadow: bool
		shader_path: os.Path
	struct Pass
	var pass0: Pass
	struct Friction
		sliding: f32
		_static: f32
		rolling: f32
		jump: f32
	var friction: Friction
	var shader_data: Any
	func extern __delete__()
	
func extern load_material(filename: os.Path) -> xfer[Material]

class Model extends Component
	class Mesh as shared
		struct Sub
			var num_triangles: i32
			var triangle_index: i32[]
			var skin_vertex: f32[]
			var normal: vec3[]
		var bone_index: i32[]
		var vertex: vec3[]
		var sub: Sub[]
#	var matrix: matrix
###	var name: string
	var radius: f32
	var min, max: vec3
	
	var materials: owned![Material][]
	
	var mesh: shared![Mesh][3]

	func extern override __init__()
	func extern override __delete__()
	
	func extern mut make_editable()
	func extern mut begin_edit(detail: i32)
	func extern mut end_edit(detail: i32)
#	func extern update_matrix()
	
	func extern get_vertex(index: i32) -> vec3

class Animator extends Component
	enum Operation
		SET           # overwrite
		SET_NEW_KEYED # overwrite, if current doesn't equal 0
		SET_OLD_KEYED # overwrite, if last equals 0
		ADD_1_FACTOR  # w = w_old         + w_new * f
		MIX_1_FACTOR  # w = w_old * (1-f) + w_new * f
		MIX_2_FACTOR  # w = w_old * a     + w_new * b
	func extern mut reset()
	func extern mut add_x(op: Operation, p1: f32, p2: f32, move: i32, out t: f32, dt: f32, vel_param: f32 = 1.0, loop: bool = true) -> bool
	func extern mut add(op: Operation, move: i32, out t: f32, dt: f32, loop: bool = true) -> bool
	func extern mut is_done(op_no: i32) -> bool

class Skeleton extends Component
	var bones: Entity&[]
	var pos0, dpos: vec3[]
	var parents: i32[]
	func extern mut reset()

func extern load_model(filename: os.Path) -> xfer[Model]
