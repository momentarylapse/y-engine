use ecs.*
use gfx.*

class LegacyParticle extends BaseClass
	var pos, vel: vec3
	var radius: float
	var time_to_live: float
	var suicidal: bool
	var texture: shared![Texture]
	var color: color
	var source: rect
	var enabled: bool
	func extern __init__(p: vec3, r: float, t: shared![Texture], ttl: float)
	func extern override __delete__()

class LegacyBeam extends LegacyParticle
	var length: vec3
	func extern __init__(p: vec3, l: vec3, r: float, t: shared![Texture], ttl: float)


class Particle
	var pos, vel: vec3
	var radius: float
	var time_to_live: float
	var suicidal: bool
	var color: color
	var enabled: bool

class Beam extends Particle
	var length: vec3


class ParticleGroup extends Component
#	var update_dt = 0.1
	#var texture: shared![Texture]
	var texture: Texture&
	var source: rect
	
	func extern override __init__()
	func extern mut emit(pos: vec3, col: color, radius: float, ttl: float) -> Particle&
	func extern mut emit_beam(pos: vec3, length: vec3, col: color, radius: float, ttl: float) -> Beam&
	func extern mut iterate_particles(dt: float)
	func extern override mut on_iterate(dt: float)
	func extern virtual mut on_iterate_particle(out p: Particle, dt: float)
	func extern virtual mut on_iterate_beam(out p: Beam, dt: float)

class ParticleEmitter extends ParticleGroup
	var spawn_beams: bool
	var spawn_dt: float
	var spawn_time_to_live: float
#	var update_dt = 0.1
#	var texture: shared![Texture]
#	var radius = 10.0
	
	func extern override __init__()
	func extern mut iterate_emitter(dt: float)
	func extern override mut on_iterate(dt: float)
	func extern virtual mut on_init_particle(out p: Particle)
	func extern virtual mut on_init_beam(out p: Beam)
