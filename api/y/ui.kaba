use y
use y.gfx
use y.ecs
use kaba

enum Key
	LEFT_CONTROL, RIGHT_CONTROL
	LEFT_SHIFT, RIGHT_SHIFT
	LEFT_ALT, RIGHT_ALT
	PLUS
	MINUS
	FENCE
	END
	PAGE_UP, PAGE_DOWN
	UP, DOWN, LEFT, RIGHT
	RETURN
	ESCAPE
	INSERT
	DELETE
	SPACE
	F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12
	_0, _1, _2, _3, _4, _5, _6, _7, _8, _9
	A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z
	BACKSPACE
	TAB
	HOME
	NUM_0, NUM_1, NUM_2, NUM_3, NUM_4, NUM_5, NUM_6, NUM_7, NUM_8, NUM_9
	NUM_PLUS
	NUM_MINUS
	NUM_MULTIPLY
	NUM_DIVIDE
	NUM_COMMA
	NUM_ENTER
	COMMA
	DOT
	LESS
	SZ, AE, OE, UE
	GRAVE
	LEFT_WINDOWS
	RIGHT_WINDOWS

	NUM_KEYS

	ANY
	CONTROL = 256
	SHIFT = 512
	ALT = 1024

enum Button
	LEFT
	MIDDLE
	RIGHT

class Node
	enum Align
		NONE
		FILL_X = 2^0
		FILL_Y = 2^1
		TOP = 2^2
		BOTTOM = 2^3
		LEFT = 2^4
		RIGHT = 2^5
		NONSQUARE = 2^7
		CENTER_H = 2^8
		CENTER_V = 2^9
		
		#CENTER = int(Node.Align.CENTER_H | Node.Align.CENTER_V)
		
	func extern __init__(r: rect)
	func extern virtual __delete__()
	func extern mut __del_override__()
		
	func extern mut add(n: Node)
		
	func extern virtual mut on_iterate(dt: float)
	func extern virtual mut on_enter()
	func extern virtual mut on_leave()
	func extern virtual mut on_left_button_down() -> bool
	func extern virtual mut on_left_button_up() -> bool
	func extern virtual mut on_middle_button_down() -> bool
	func extern virtual mut on_middle_button_up() -> bool
	func extern virtual mut on_right_button_down() -> bool
	func extern virtual mut on_right_button_up() -> bool
	var pos: vec2
	var x, y: float
	var width, height: float
	func extern set_area(r: rect)
	var _eff_area: rect
	var margin: rect
	var dz: float
	var color: color
	var align: Align
	var visible: bool
	var children: Node*[]
	
class HBox extends Node
	func extern __init__()
	
class VBox extends Node
	func extern __init__()
		
class Picture extends Node
	func extern __init__(r: rect, tex: Texture, source: rect = rect.ID)
	func extern override __delete__()
	var source: rect
	var texture: Texture*
	var blur: float
	var angle: float
	var shader: Shader*
	var shader_data: any

class Text extends Picture
	func extern __init__(t: string, font_size: float, p: vec2 = vec2.0)
	func extern override __delete__()
	var text: string
	var font_size: float
	func extern set_text(t: string)
	
class Picture3d extends Node
	var model: Model*
	var matrix: mat4
	var world_3d: bool
	var lighting: bool
	func __init__(m: Model*, mat: mat4, z: float)
		super.__init__(rect.ID)
		model = m
		self.matrix = mat

var extern static toplevel: Node*
func extern static key_state(k: Key) -> bool
func extern static key_down(k: Key) -> bool
func extern static key_up(k: Key) -> bool
func extern static button(b: Button) -> bool

var extern static mouse, dmouse, scroll: vec2
	
var extern static link_mouse_and_keyboard_into_pad: bool
	
class Gamepad as shared
	enum Button
		CROSS, CIRCLE, SQUARE, TRIANGLE
		L1, R1
		OPTIONS, SHARE, PS
		L3, R3
		UP, RIGHT, DOWN, LEFT
	var deadzone: float
	
	func extern is_present() -> bool
	func extern name() -> string
	func extern axis(a: int) -> float
	func extern button(b: Button) -> bool
	func extern clicked(b: Button) -> bool

func extern static get_pad(index: int = -1) -> Gamepad shared




class Controller extends BaseClass
	func extern override __delete__()
	
	# common
#	extern virtual void on_iterate(float dt)
	func extern virtual mut on_key_down(key: Key)
	func extern virtual mut on_key_up(key: Key)
	func extern virtual mut on_left_button_down()
	func extern virtual mut on_left_button_up()
	func extern virtual mut on_middle_button_down()
	func extern virtual mut on_middle_button_up()
	func extern virtual mut on_right_button_down()
	func extern virtual mut on_right_button_up()
	func extern virtual mut on_input()
	
	# rare
	func extern virtual mut on_iterate_pre(dt: float)
	func extern virtual mut on_draw_pre()
	func extern virtual mut on_render_inject()


func extern __get_controller(type: Class) -> Controller*
func get_controller[T]() -> T*
	var c: T* = __get_controller(T)
	return c
