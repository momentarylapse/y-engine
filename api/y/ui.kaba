use image.Painter
use gfx.*
use common.*
use model.*
use kaba



enum Button
	LEFT
	MIDDLE
	RIGHT

class Node as shared
	enum Align
		NONE
		FILL_X = 2^0
		FILL_Y = 2^1
		TOP = 2^2
		BOTTOM = 2^3
		LEFT = 2^4
		RIGHT = 2^5
		NONSQUARE = 2^7
		CENTER_H = 2^8
		CENTER_V = 2^9
		
		#CENTER = int(Node.Align.CENTER_H | Node.Align.CENTER_V)
		
	func extern __init__()
	func extern __init__(r: Rect)
	func extern virtual __delete__()
	func extern mut __del_override__()
		
	func extern mut add(n: shared![Node])
	func extern mut add_from_source(s: string)
	func extern mut remove_all_children()
	func extern mut remove(n: Node&)
	func extern selfref _get(id: string) -> Node*
	func selfref get[X](id: string) -> X*
		return _get(id) as X*
		
	func extern virtual mut on_iterate(dt: f32)
	func extern virtual mut on_enter()
	func extern virtual mut on_leave()
	func extern virtual mut on_left_button_down() -> bool
	func extern virtual mut on_left_button_up() -> bool
	func extern virtual mut on_middle_button_down() -> bool
	func extern virtual mut on_middle_button_up() -> bool
	func extern virtual mut on_right_button_down() -> bool
	func extern virtual mut on_right_button_up() -> bool
	var pos: vec2
	var x, y: f32
	var width, height: f32
	func extern set_area(r: Rect)
	var _eff_area: Rect
	var margin: Rect
	var dz: f32
	var color: Color
	var align: Align
	var visible: bool
	var children: shared![Node][]

class HBox extends Node
	func extern override __init__()

class VBox extends Node
	func extern override __init__()
		
class Picture extends Node
	func extern override __init__()
	func extern __init__(r: Rect, tex: shared![Texture], source: Rect = Rect.ID)
	func extern override __delete__()
	var source: Rect
	var texture: shared![Texture]
	var blur: f32
	var angle: f32
	var shader: shared[Shader]
	var shader_data: Any

class Text extends Picture
	func extern override __init__()
	func extern __init__(t: string, font_size: f32, p: vec2 = vec2.0)
	func extern override __delete__()
	var text: string
	var font_size: f32
	func extern set_text(t: string)
	
class Picture3d extends Node
	var model: Model*
	var matrix: mat4
	var world_3d: bool
	var lighting: bool
	func __init__(m: Model*, mat: mat4, z: f32)
		#super.__init__(Rect.ID)
		model = m
		self.matrix = mat

class Canvas extends Node
	func extern override __init__()
	func extern override __delete__()
	func virtual mut on_draw(out p: Painter)

var extern static toplevel: Node&
func extern static key_state(k: Key) -> bool
func extern static key_down(k: Key) -> bool
func extern static key_up(k: Key) -> bool
func extern static button(b: Button) -> bool

var extern static mouse, dmouse, scroll: vec2
	
var extern static link_mouse_and_keyboard_into_pad: bool
	
class Gamepad as shared
	enum Button
		CROSS, CIRCLE, SQUARE, TRIANGLE
		L1, R1
		OPTIONS, SHARE, PS
		L3, R3
		UP, RIGHT, DOWN, LEFT
	var deadzone: f32
	
	func extern is_present() -> bool
	func extern name() -> string
	func extern axis(a: i32) -> f32
	func extern button(b: Button) -> bool
	func extern clicked(b: Button) -> bool

func extern static get_pad(index: i32 = -1) -> shared![Gamepad]

var extern static vr_active: bool


# FIXME kaba link sub classes (VRDevice.Role) (-_-)
enum VRDeviceRole
	NONE
	CONTROLLER_RIGHT
	CONTROLLER_LEFT
	HEADSET
	LIGHTHOUSE0
	LIGHTHOUSE1
		
struct VRDevice

	enum Button
		TRIGGER = 0
		TRACKPAD = 1
		JOYSTICK = 2
		SYSTEM = 3
		A = 4
		B = 5
		MENU = 6
		GRIP = 7

	enum Axis
		TRIGGER = 1
		TRACKPAD_H = 2
		TRACKPAD_V = 3
		MIDDLE_FINGER_PROXIMITY = 4
		RING_FINGER_PROXIMITY = 5
		PINKY_FINGER_PROXIMITY = 6
		TRIGGER_FINGER_PROXIMITY = 7
		GRIP_FORCE = 8
		TRACKPAD_FORCE = 9
		JOYSTICK_H = 10
		JOYSTICK_V = 11


	var name: string
	var role: VRDeviceRole
	var pos: vec3
	var ang: Quaternion
	func extern button(b: Button) -> bool
	func extern clicked(b: Button) -> bool
	func extern axis(a: Axis) -> f32

func extern static get_vr_device(role: VRDeviceRole) -> VRDevice*


