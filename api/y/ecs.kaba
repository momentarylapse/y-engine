use kaba

#class extern Model
#class extern SolidBody

struct BaseClass
#	extern void __init__()
	func extern virtual __delete__()
	func extern __del_override__()
	func extern virtual mut on_init()
	func extern virtual mut on_delete()
	func extern virtual mut on_iterate(dt: float)

struct Entity extends BaseClass
	var pos: vec3
	var ang: quaternion
	var parent: Entity*
	func extern get_matrix() -> mat4
	
	func extern selfref mut __add_component(t: Class*, vars: string) -> ptr![Component]
	func extern selfref __get_component(t: Class*) -> Component*
	
	func selfref mut add_component[T](vars: string) -> ptr![T]
		return __add_component(T, vars) as ptr![T]
	func selfref get_component[T]() -> T*
		return __get_component(T) as T*
	
#	func selfref model() -> Model*
#		var m: Model* = get_component(Model)
#		return m
#	func selfref body() -> SolidBody*
#		var b: SolidBody* = get_component(SolidBody)
#		return b



class CollisionData
	var entity: ptr![Entity]
	#var body: SolidBody*
	var pos, n: vec3

# always let the engine create/delete!
class Component
	func extern __init__()
	func extern virtual __delete__()
	func extern virtual mut on_init()
	func extern virtual mut on_delete()
	func extern virtual mut on_iterate(dt: float)
	func extern virtual mut on_collide(col: CollisionData)
	func extern mut set_variables(vars: string)
	var owner: ptr![Entity]
	use owner

func extern __get_component_list(t: Class*) -> ptr![Component][]&
func get_component_list[T]() -> ptr![T][]&
	return __get_component_list(T) as ptr![T][]&

func extern __get_component_family_list(t: Class*) -> ptr![Component][]&
func get_component_family_list[T]() -> ptr![T][]&
	return __get_component_family_list(T) as ptr![T][]&

#func ffff()
#	get_component_list[int]()

