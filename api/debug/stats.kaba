use y

func channel_level(channel: int) -> int
	let parent = PerformanceMonitor.channels[channel].parent
	if parent < 0
		return 0
	return channel_level(parent) + 1


class StatDisplay extends Picture

	let CHANNEL_HEIGHT = 0.015
	let DISPLAY_HEIGHT = 0.2
	
	func __init__()
		super.__init__([0,1, 0,0.2], tex_white)
		align = Node.Align.LEFT | Node.Align.TOP | Node.Align.FILL_X
		self.color = [0,0,0, 0.7]
		
		visible = false
		
	func mut update()
		remove_all_children()
		
		let frame_t = PerformanceMonitor.previous_frame_timing.total_time
		var scale = 1.5 / frame_t
		
		# ms ticks
		for t in 0.0:frame_t:0.001
			var p = new Picture([t*scale, t*scale+0.001, 0, DISPLAY_HEIGHT], tex_white)
			p.color = [1,1,1,0.1]
			add(give(p))
		if true
			var p = new Picture([frame_t*scale, frame_t*scale+0.002, 0, DISPLAY_HEIGHT], tex_white)
			p.color = [1,1,1,0.2]
			add(give(p))
		
		var started: PerformanceMonitor.TimingData[]
		for t in PerformanceMonitor.previous_frame_timing.cpu0
			if (t.channel & 0x80000000) == 0
				started.add(t)
			else
				let c = t.channel & 0x0000ffff
				for i=>s in started
					if s.channel == c
						let level = len(started) - 1 # channel_level(c)
						let x = s.offset * scale
						let dt = t.offset - s.offset
						let w = dt * scale
						let y = DISPLAY_HEIGHT - CHANNEL_HEIGHT * (level+1)
						var p = new Picture([x, x + w, y, y + CHANNEL_HEIGHT], tex_white)
						p.color = color.hsb(c * 3.4151, 0.5, 0.5, 0.5)
						add(give(p))
						if w > 0.02
							var ll = PerformanceMonitor.channels[c].name
							if w > 0.1
								ll += " {{dt * 1000|0.2}}"
							let label = new Text(ll, CHANNEL_HEIGHT, [x+0.001, y])
							add(give(label))
						started.remove(i)
						break



class Test extends Controller
	var t: float
	var stat_display: shared![StatDisplay]
	
	func override on_init()
		stat_display = new StatDisplay()
		toplevel.add(stat_display)

	func override on_key_down(k: Key)
		if k == Key.CONTROL + Key.T
			stat_display.visible = not stat_display.visible
			stat_display.update()
		if k == Key.CONTROL + Key.R
			stat_display.update()


	func override on_iterate(dt: float)
		#if PerformanceMonitor.frames == 0
		#	stat_display.update()

