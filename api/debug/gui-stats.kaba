use y
use y.ui
use y.engine

class StatDisplay extends Node
	var label, stat: shared![Text]
	
	func __init__()
		super.__init__(rect.ID)
		align = Node.Align.RIGHT | Node.Align.TOP
		margin = [0,0.01, 0.017,0]
		
		label = new Text("AA", 0.015)
		label.align = Node.Align.RIGHT | Node.Align.TOP
		label.margin.x2 = 0.05
		add(label)
		stat = new Text("AA", 0.015)
		stat.align = Node.Align.RIGHT | Node.Align.TOP
		add(stat)
		
		visible = false

		# needs to update AFTER setting align
#		label.set_text([for l in locations LOC_NAME[l]].join("\n"))

	func mut add_pm_group(out l: string[], out s: string[], parent: int, indent: string)
		for i=>c in PerformanceMonitor.channels
			if c.parent == parent
				l.add(c.name + indent)
				s.add("{{c.average*1000|.2}}")
				add_pm_group(l, s, i, indent + "    ")

	func override on_iterate(dt: float)
		if PerformanceMonitor.frames == 0
			var l, s: string[]
			add_pm_group(l, s, -1, "")
			label.set_text(l.join("\n"))
			stat.set_text(s.join("\n"))

class Test extends Controller
	var t: float
	var stat_display: shared![StatDisplay]
	
	func override on_init()
		stat_display = new StatDisplay()
		toplevel.add(stat_display)

	func override on_key_down(k: Key)
		if k == Key.CONTROL + Key.T
			stat_display.visible = not stat_display.visible
